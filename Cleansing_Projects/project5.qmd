---
title: "Client Report - The War with Star Wars"
subtitle: "Course DS 250"
author: "Michael Howes"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

### Paste in a template
---

```{python}
import pandas as pd 
import numpy as np
from lets_plot import *
# add the additional libraries you need to import for ML here

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_csv("StarWars.csv", encoding="ISO-8859-1")
df = df.iloc[1:].copy()

# import your data here using pandas and the URL


```

## Elevator pitch
_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)

_A Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client._

## QUESTION|TASK 1

__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. 

To simplify working with the data in pandas, I shortened long and inconsistent column names. This helps reduce errors and improves readability. For example: "Have you seen any of the 6 films in the Star Wars franchise?" into "seen_any", "Household Income" into "income_range", and "Do you consider yourself to be a fan of the Expanded Universe?"  into "fan_expanded_universe"

```{python}
import pandas as pd

df = pd.read_csv("StarWars.csv", encoding="ISO-8859-1")
df = df.iloc[1:].copy()

rename_map = {
    df.columns[0]: "respondent_id",
    df.columns[1]: "seen_any",
    df.columns[2]: "is_fan",
    df.columns[3]: "seen_ep1",
    df.columns[4]: "seen_ep2",
    df.columns[5]: "seen_ep3",
    df.columns[6]: "seen_ep4",
    df.columns[7]: "seen_ep5",
    df.columns[8]: "seen_ep6",
    df.columns[29]: "who_shot_first",
    df.columns[30]: "know_expanded_universe",
    df.columns[31]: "fan_expanded_universe",
    df.columns[32]: "fan_star_trek",
    df.columns[33]: "gender",
    df.columns[34]: "age_range",
    df.columns[35]: "income_range",
    df.columns[36]: "education",
    df.columns[37]: "region"
}
df.rename(columns=rename_map, inplace=True)
df.head()

```


## QUESTION|TASK 2

__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  
    a. Filter the dataset to respondents that have seen at least one film  
    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  
    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  
    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  
    a. Create your target (also known as “y” or “label”) column based on the new income range column  
    a. One-hot encode all remaining categorical columns   

I filtered the data to only include people who have seen at least one Star Wars film. I converted age, education, and income into numerical values to be usable in a machine learning model. I also dropped the original categorical columns and applied one-hot encoding to all remaining categorical variables. Finally, I created a target column (income_over_50k) for modeling.

```{python}
import numpy as np

# Seen at least one film
df = df[df['seen_any'].str.strip().str.lower() == 'yes'].copy()
#Age range to Midpoint
age_map = {
    "18-29": 24,
    "30-44": 37,
    "45-60": 52,
    "60+": 65
}
df["age"] = df["age_range"].map(age_map)
# Education lvl to ordinal
edu_map = {
    "Less than high school degree": 1,
    "High school degree": 2,
    "Some college or Associate degree": 3,
    "Bachelor degree": 4,
    "Graduate degree": 5
}
df["education_num"] = df["education"].map(edu_map)
# Income to Midpoint
income_map = {
    "$0 - $24,999": 12500,
    "$25,000 - $49,999": 37500,
    "$50,000 - $74,999": 62500,
    "$75,000 - $99,999": 87500,
    "$100,000 - $149,999": 125000,
    "$150,000+": 175000
}
df["income"] = df["income_range"].map(income_map)
#Binary Target Column
df["income_over_50k"] = np.where(df["income"] > 50000, 1, 0)
# Remove used columns
df.drop(columns=["age_range", "income_range", "education"], inplace=True)

df = pd.get_dummies(df, drop_first=True)

df.head()

```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

## QUESTION|TASK 3

__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  

To verify that the dataset matches the original article, I recreated two visuals. The first is "A bar chart of Star Wars episode popularity based on viewing frequency." and the second is "A comparison of Star Wars fan rates by gender."

"
```{python}
from lets_plot import *

LetsPlot.setup_html()

episode_cols = [
    "Star Wars: Episode I  The Phantom Menace",
    "Star Wars: Episode II  Attack of the Clones",
    "Star Wars: Episode III  Revenge of the Sith",
    "Star Wars: Episode IV  A New Hope",
    "Star Wars: Episode V The Empire Strikes Back",
    "Star Wars: Episode VI Return of the Jedi"
]
episode_titles = [
    "Ep I: Phantom Menace", "Ep II: Attack of the Clones", "Ep III: Revenge of the Sith",
    "Ep IV: A New Hope", "Ep V: Empire Strikes Back", "Ep VI: Return of the Jedi"
]
print(df.columns.tolist())

seen_counts = df[episode_cols].notna().sum().reset_index()
seen_counts.columns = ["episode", "count"]
seen_counts["title"] = episode_titles

ggplot(seen_counts, aes(x="title", y="count")) + geom_col() + ggtitle("Episode View Count")

```

```{python}
fan_gender = df[df["is_fan_Yes"] == 1]["gender_Male"].value_counts().reset_index()
fan_gender.columns = ["is_male", "count"]
fan_gender["gender"] = fan_gender["is_male"].map({1: "Male", 0: "Female"})

ggplot(fan_gender, aes(x="gender", y="count")) + geom_col() + ggtitle("Star Wars Fans by Gender")

```

## QUESTION|TASK 4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ 

I built a logistic regression model to predict whether a respondent earns more than $50k using demographic and survey response data. The model was trained using 80% of the cleaned data and tested on the remaining 20%. It achieved an accuracy of approximately 58%, which suggests limited but non-random predictive power. The primary features influencing the prediction included age, education level, gender, and fan affiliation.

```{python}
# Include and execute your code here
# TASK 4: Predict if income > $50k using logistic regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Drop rows missing key numeric values
df_ml = df.dropna(subset=["age", "education_num", "income"])

# Features (drop ID, income, and label column)
X = df_ml.drop(columns=["respondent_id", "income", "income_over_50k"])
y = df_ml["income_over_50k"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
round(accuracy, 4)

```

---